import{d3 as et,d4 as at,r as D,n as z,N as C,G as S,ab as V,U as b,O as W,l as it,d5 as ot,d6 as nt,a4 as lt,d7 as rt,d8 as st,d9 as ut,a9 as ct,bK as dt,E as pt,F as gt,J as ft}from"./main-CaSg3MKk.js";const mt=c=>({type:et,payload:c}),Dt=(c,s)=>({type:at,payload:{mealType:c,flag:s}}),Z={PERCENTAGE:"percentage",FIXED:"fixed"},H={ADMIN:"admin",USER:"user",GROUP:"group"},vt=()=>{const c=new Date,s=c.getFullYear(),A=String(c.getMonth()+1).padStart(2,"0"),d=String(c.getDate()).padStart(2,"0");return`${s}-${A}-${d}`},J=(c,s)=>!c||!s?0:c.type===Z.PERCENTAGE?Math.round(s*c.value):c.value,L=(c,s)=>c==null||s==null?0:c-s,St=()=>{const[c,s]=D.useState(!1),[A,d]=D.useState(null),M=z(t=>t.auth.user),h=D.useCallback(async(t,o)=>{if(!t||o===void 0)throw new Error("userId와 calorieBias가 필요합니다.");s(!0),d(null);try{const a=C(S,"users",t);return await V(a,{calorieBias:Number(o),updatedAt:new Date().toISOString()}),!0}catch(a){return console.error("개인 칼로리 편차 저장 실패:",a),d(a.message),!1}finally{s(!1)}},[]),w=D.useCallback(async t=>{if(!t)return 0;try{const o=C(S,"users",t),a=await b(o);return a.exists()&&a.data().calorieBias||0}catch(o){return console.error("개인 칼로리 편차 조회 실패:",o),0}},[]),x=D.useCallback(async t=>{if(!t)return console.log("getGroupDeviationSettings: groupId가 없음"),null;try{const o=vt(),a=C(S,"calorieGroups",t.toString()),e=await b(a);if(e.exists()){const l=e.data();let r=l.applicableDate;if(l.applicableDate&&typeof l.applicableDate.toDate=="function"){const n=l.applicableDate.toDate(),p=n.getFullYear(),y=String(n.getMonth()+1).padStart(2,"0"),v=String(n.getDate()).padStart(2,"0");r=`${p}-${y}-${v}`}if(r===o)return{deviationMultiplier:l.deviationMultiplier||1,defaultDeviation:l.defaultDeviation||0,groupId:t,applicableDate:l.applicableDate}}return null}catch(o){return console.error("그룹 편차 설정 조회 실패:",o),null}},[]),I=D.useCallback(async t=>{if(!t)return null;try{const o=C(S,"users",t),a=await b(o);return a.exists()&&a.data().group||null}catch(o){return console.error("사용자 그룹 조회 실패:",o),null}},[]),$=D.useCallback(async(t,o=null)=>{try{const a=C(S,"deviationSettings","users",t),e=await b(a);if(e.exists()&&e.data().isActive){const n=e.data();if(n.overridesGroup)return n}if(o){const n=C(S,"deviationSettings","groups",o.toString()),p=await b(n);if(p.exists()&&p.data().isActive)return p.data()}const l=C(S,"deviationSettings","global","default"),r=await b(l);return r.exists()&&r.data().isActive?r.data():null}catch(a){return console.error("편차 설정 조회 실패:",a),d(a.message),null}},[]),k=D.useCallback((t,o,a="user")=>{if(!t||!o)return t;const e={estimated:t.originalCalories?.estimated??t.estimatedCalories??null,actual:t.originalCalories?.actual??t.actualCalories??null},l=e.estimated||0,r=J(o,l),n=L(e.actual,e.estimated),p={estimated:e.estimated?e.estimated+r:null,actual:e.actual?e.actual+r:null};return{...t,originalCalories:e,finalCalories:p,calorieDeviation:{natural:n,applied:{type:o.type,value:o.value,calculatedAmount:r,appliedAt:new Date,appliedBy:a,source:a==="admin"?H.ADMIN:H.USER},total:n+r}}},[]),_=D.useCallback(async(t,o,a,e)=>{if(!t||!o||!a||!e)throw new Error("필수 매개변수가 누락되었습니다.");s(!0),d(null);try{const l=C(S,"users",t,"foods",o),r=await b(l);if(!r.exists())throw new Error("해당 날짜의 식사 데이터가 존재하지 않습니다.");const p=r.data()[a];if(!p)throw new Error("해당 식사 데이터가 존재하지 않습니다.");const y=k(p,e,"user");return await V(l,{[a]:y,updatedAt:new Date().toISOString()}),!0}catch(l){return console.error("편차 적용 실패:",l),d(l.message),!1}finally{s(!1)}},[k]),q=D.useCallback((t,o=0)=>{if(!t)return null;const a=t.calorieDeviation?.natural||0,e=t.calorieDeviation?.applied||0;return a+e+o},[]),Y=D.useCallback(t=>t?t.calorieDeviation?.applied||0:null,[]),Q=D.useCallback(async(t,o,a)=>{if(!t||!a)throw new Error("필수 매개변수가 누락되었습니다.");s(!0),d(null);try{let e;if(t==="global")e="deviationSettings/global/default";else if(t==="group")e=`deviationSettings/groups/${o}`;else if(t==="user")e=`deviationSettings/users/${o}`;else throw new Error("잘못된 대상 타입입니다.");const l={...a,updatedAt:new Date,appliedBy:M?.uid||"unknown"};return t==="global"&&(l.createdAt=l.createdAt||new Date),await W(C(S,e),l,{merge:!0}),!0}catch(e){return console.error("편차 설정 저장 실패:",e),d(e.message),!1}finally{s(!1)}},[M]),j=D.useCallback(async(t,o,a)=>{if(!t||!o||!a)throw new Error("필수 매개변수가 누락되었습니다.");s(!0),d(null);try{const e=C(S,"users",t,"foods",o),l=await b(e);if(!l.exists())throw new Error("해당 날짜의 식사 데이터가 존재하지 않습니다.");const n=l.data()[a];if(!n||!n.originalCalories)throw new Error("원본 칼로리 데이터가 존재하지 않습니다.");const p={...n,estimatedCalories:n.originalCalories.estimated,actualCalories:n.originalCalories.actual,finalCalories:{estimated:n.originalCalories.estimated,actual:n.originalCalories.actual},calorieDeviation:{natural:L(n.originalCalories.actual,n.originalCalories.estimated),applied:null,total:L(n.originalCalories.actual,n.originalCalories.estimated)}};return await V(e,{[a]:p,updatedAt:new Date().toISOString()}),!0}catch(e){return console.error("편차 제거 실패:",e),d(e.message),!1}finally{s(!1)}},[]);return{loading:c,error:A,getDeviationSettings:$,applyDeviationToMeal:k,applyDeviation:_,saveDeviationSettings:Q,removeDeviation:j,savePersonalCalorieBias:h,getPersonalCalorieBias:w,getGroupDeviationSettings:x,getUserGroupId:I,calculateFinalDifference:q,getAppliedDeviation:Y,calculateDeviationAmount:J,calculateNaturalDeviation:L,DEVIATION_TYPES:Z,DEVIATION_SOURCES:H}},K=()=>{const c=new Date,s=c.getFullYear(),A=String(c.getMonth()+1).padStart(2,"0"),d=String(c.getDate()).padStart(2,"0");return`${s}-${A}-${d}`},X=()=>{const s=new Date().getHours();return s>=0&&s<12?"breakfast":s>=12&&s<18?"lunch":"dinner"},P=(c,s,A,d=0)=>{let M=0;if(c&&s){let h=s-c;if(A){const{deviationMultiplier:w=1,defaultDeviation:x=0}=A;if(h>0){const I=1+w;M=-h*I+x}else{const I=1+w;M=h*I+x}}else M=h}return M+=d,Math.round(M)},Ct=()=>{const[c,s]=D.useState(null),[A,d]=D.useState(!1),[M,h]=D.useState(null),w=z(t=>t.auth.user?.uid),x=it(),{getDeviationSettings:I,getPersonalCalorieBias:$,getGroupDeviationSettings:k,getUserGroupId:_}=St();D.useEffect(()=>{w&&q()},[w]);const q=async()=>{d(!0);try{const t=K(),o=C(S,"users",w,"foods",t),a=await b(o);if(a.exists())s(a.data());else{const e={date:t,breakfast:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:0},selectedFoods:[],updatedAt:new Date().toISOString()},lunch:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:0},selectedFoods:[],updatedAt:new Date().toISOString()},dinner:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:0},selectedFoods:[],updatedAt:new Date().toISOString()},snacks:{foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:0},selectedFoods:[]}};s(e)}}catch(t){h(t)}finally{d(!1)}},Y=D.useCallback(async(t,o=[],a=null,e=null,l=[],r=0)=>{if(!w||!t){console.error("uid 또는 mealType이 없습니다:",{uid:w,mealType:t});return}d(!0);try{const n=K(),p=C(S,"users",w,"foods",n),y=await b(p);let v=y.exists()?y.data():{date:n};const B=(o||[]).map(i=>({name:i.name||"",calories:isNaN(Number(i.calories))?0:Number(i.calories),weight:isNaN(Number(i.weight))?0:Number(i.weight),portion:isNaN(Number(i.portion))?1:Number(i.portion),nutrients:{carbs:isNaN(Number(i.nutrients?.carbs))?0:Number(i.nutrients.carbs),fat:isNaN(Number(i.nutrients?.fat))?0:Number(i.nutrients.fat),protein:isNaN(Number(i.nutrients?.protein))?0:Number(i.nutrients.protein)}})).filter(i=>i.name),g=await $(w);let u=null;const E=await _(w);if(v[t]?.groupDeviationConfig){const i=v[t].groupDeviationConfig;u={deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,groupId:i.groupId,applicableDate:i.appliedAt}}else E&&(u=await k(E));const O=await I();if(t==="snacks"){const i=X(),m=v[i]||{flag:0,foods:[],originalCalories:{estimated:0,actual:0},finalCalories:{estimated:0,actual:0},calorieDeviation:{natural:0,applied:0},selectedFoods:[],updatedAt:new Date().toISOString()},f=v.snacks||{foods:[],originalCalories:{estimated:0,actual:0},finalCalories:{estimated:0,actual:0},calorieDeviation:{natural:0,applied:0},selectedFoods:[]},N=(f.originalCalories.estimated||0)+(a||0),F=(f.originalCalories.actual||0)+(e||0),R=N&&F?P(N,F,u,g):g;v.snacks={foods:[...f.foods,...B],originalCalories:{estimated:N,actual:F},finalCalories:{estimated:N?N+R:null,actual:F?F+R:null},calorieDeviation:{...f.calorieDeviation,applied:R,groupSettings:u,personalBias:g},selectedFoods:[...f.selectedFoods||[],...l||[]],groupDeviationConfig:u?{groupId:u.groupId||E,deviationMultiplier:u.deviationMultiplier,defaultDeviation:u.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"user"}:f.groupDeviationConfig||null};const G=(m.originalCalories.estimated||0)+(a||0),U=(m.originalCalories.actual||0)+(e||0),T=U&&G?U-G:0,tt=G&&U?P(G,U,u,g):g;v[i]={...m,flag:Number(m.flag),foods:[...m.foods,...B],originalCalories:{estimated:G,actual:U},calorieDeviation:{natural:T,applied:tt,groupSettings:u,personalBias:g},selectedFoods:[...m.selectedFoods||[],...l||[]],updatedAt:new Date().toISOString(),groupDeviationConfig:u?{groupId:u.groupId||E,deviationMultiplier:u.deviationMultiplier,defaultDeviation:u.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"user"}:m.groupDeviationConfig||null}}else{const i=v[t]||{calorieDeviation:{natural:0,applied:0}},m=a!==null?Number(a):null,f=e!==null?Number(e):null,N=f&&m?f-m:0,F=m&&f?P(m,f,u,g):g;v[t]={flag:Number(r),foods:B,originalCalories:{estimated:m,actual:f},calorieDeviation:{natural:N,applied:F,groupSettings:u,personalBias:g},selectedFoods:l||[],updatedAt:new Date().toISOString(),groupDeviationConfig:u?{groupId:u.groupId||E,deviationMultiplier:u.deviationMultiplier,defaultDeviation:u.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"user"}:i.groupDeviationConfig||null}}if(await W(p,v,{merge:!0}),s(v),r===1){const i=t==="snacks"?X():t;x(Dt(i,1))}}catch(n){console.error("저장 중 에러 발생:",n),h(n)}finally{d(!1)}},[w,I]),Q=D.useCallback(async t=>{if(!t||t.length===0)return[];d(!0);try{const o=ot(),a=[];for(const e of t)try{const l=nt(lt(o,"foods"),rt("name"),st(e),ut(1)),r=await ct(l);if(r.exists()){let n;r.forEach(p=>(n=p.val(),!0)),a.push({name:e,calories:n.calories||0,weight:n.weight||"100g",nutrients:{carbs:n.nutrients?.carbs||0,fat:n.nutrients?.fat||0,protein:n.nutrients?.protein||0},...n})}else console.log(`${e}에 대한 정보가 없습니다.`),a.push({name:e,calories:0,weight:"100g",nutrients:{carbs:0,fat:0,protein:0}})}catch(l){console.error(`${e} 조회 중 오류 발생:`,l),a.push({name:e,calories:0,weight:"100g",nutrients:{carbs:0,fat:0,protein:0}})}return a}catch(o){return console.error("음식 정보를 가져오는 중 오류 발생:",o),h(o),[]}finally{d(!1)}},[]),j=D.useCallback(async(t,o,a,e=null,l=!1,r=null)=>{if(!t||!Array.isArray(t)||t.length===0)throw new Error("사용자 ID 목록이 필요합니다.");if(!o||!a)throw new Error("날짜와 식사 유형이 필요합니다.");d(!0),h(null);try{let n=e;if(l&&r){const g=await k(r);g&&(n={type:"percentage",value:g.deviationMultiplier||1,defaultDeviation:g.defaultDeviation||0})}if(!n)throw new Error("편차 설정이 필요합니다.");const p=dt(S);let y=0;const v=[];let B=t;if(r&&(!t||t.length===0))try{const g=pt(gt(S,"calorieGroups",r,"users"));B=(await ft(g)).docs.map(E=>E.data().uid)}catch(g){throw console.error("그룹 사용자 목록 조회 실패:",g),new Error("그룹 사용자 목록을 가져올 수 없습니다.")}for(const g of B)try{const u=C(S,"users",g,"foods",o),E=await b(u),O=await $(g)||0,i=r?await k(r):null;if(!E.exists()){const R={date:o,breakfast:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:O},selectedFoods:[],updatedAt:new Date().toISOString(),groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null},lunch:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:O},selectedFoods:[],updatedAt:new Date().toISOString(),groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null},dinner:{flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:O},selectedFoods:[],updatedAt:new Date().toISOString(),groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null},snacks:{foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:O},selectedFoods:[],groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null}};p.set(u,R),y++;continue}const f=E.data()[a];if(!f){const R={flag:0,foods:[],originalCalories:{estimated:null,actual:null},finalCalories:{estimated:null,actual:null},calorieDeviation:{natural:0,applied:O},selectedFoods:[],updatedAt:new Date().toISOString(),groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null};p.update(u,{[a]:R,updatedAt:new Date().toISOString()}),y++;continue}let N=O;f.originalCalories&&f.originalCalories.estimated&&f.originalCalories.actual&&(N=P(f.originalCalories.estimated,f.originalCalories.actual,i,O));const F={...f,calorieDeviation:{...f.calorieDeviation,applied:N,groupSettings:i,personalBias:O},groupDeviationConfig:i?{groupId:r,deviationMultiplier:i.deviationMultiplier,defaultDeviation:i.defaultDeviation,appliedAt:new Date().toISOString(),appliedBy:"admin"}:null,updatedAt:new Date().toISOString()};p.update(u,{[a]:F,updatedAt:new Date().toISOString()}),y++}catch(u){console.error(`사용자 ${g} 처리 중 오류:`,u),v.push(`사용자 ${g}: ${u.message}`)}return await p.commit(),{success:!0,processedCount:y,totalCount:B.length,errors:v.length>0?v:null}}catch(n){return console.error("그룹 편차 적용 실패:",n),h(n.message),{success:!1,error:n.message}}finally{d(!1)}},[k,$]);return{loading:A,error:M,foodData:c,saveFoodData:Y,fetchFoodDetails:Q,applyGroupDeviation:j,calculateCalorieOffset:P}};export{Dt as a,St as b,mt as s,Ct as u};
